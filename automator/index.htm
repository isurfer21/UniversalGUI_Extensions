<!--intro{
### Automator (*Version 1.0.0*)
To ease the workflow, we have developed the automator tool that could
 - **Make a copy** of *cloned repository* in your local working directory, so that your *working repository* could be separated from the *cloned repository* that is used for reference and final code commit. 
 - **Synchronise** the *cloned repository* with your *working repository* before starting new task or at your will.
 - **Reverse synchronise** your *working repository* with the *cloned repository* when task gets completed or at your will.

#### Compatible with
 - Mac OSX, Windows, Linux

#### Note:
 - **Cloned repository** &rarr; It refers to git repository that is cloned from remote branch
 - **Working repository** &rarr; It refers to git repository that is local *working repository* based on *cloned repository*
}intro-->
<div class="ui message">
  <div class="header">Automator</div>
  <p>Fill out the form below then click on Execute button</p>
</div>
<div class="ui fluid accordion">
    <div class="title">
        <i class="settings icon"></i>
        Settings
    </div>
    <div class="content field">
        <form id="eupform" class="ui form">
            <div class="field">
                <label>Source path</label>
                <div class="field">
                    <input type="text" name="sourcepath" placeholder="/Users/kumarab/Documents/Workshop/Git">
                </div>
            </div>
            <div class="field">
                <label>Garage path</label>
                <div class="field">
                    <input type="text" name="garagepath" placeholder="/Users/kumarab/Documents/Workshop/Garage">
                </div>
            </div>
            <button type="submit" class="ui button">Save</button>
        </form>
    </div>
    <div class="title">
        <i class="dropdown icon"></i>
        New repository
    </div>
    <div class="content field">
        <form id="anrform" class="ui form">
            <div class="field">
                <label>Repository's name</label>
                <div class="field">
                    <input type="text" name="repositoryname" placeholder="component-template">
                </div>
            </div>
            <button type="submit" class="ui button">Add</button>
        </form>
    </div>
    <div class="title active">
        <i class="dropdown icon"></i>
        Application
    </div>
    <div class="content field active">
        <form id="appform" class="ui form">
            <div class="field">
                <label>Repository's name</label>
                <div data-for="repositoryname" class="ui selection dropdown">
                    <input type="hidden" name="repositoryname">
                    <i class="dropdown icon"></i>
                    <div class="default text">Select repository</div>
                    <div class="menu"></div>
                </div>
            </div>
            <div class="field">
                <label>Perform action</label>
                <div class="ui selection dropdown">
                    <input type="hidden" name="performaction">
                    <i class="dropdown icon"></i>
                    <div class="default text">Select action</div>
                    <div class="menu">
                        <div class="item" data-value="help">Help</div>
                        <div class="item" data-value="copy">Copy</div>
                        <div class="item" data-value="sync">Synchronize</div>
                        <div class="item" data-value="rsync">Reverse Synchronize</div>
                    </div>
                </div>
            </div>
            <button type="submit" class="ui button">Execute</button>
            <button type="reset" class="ui button">Clear</button>
        </form>
    </div>
</div>
<script type="text/javascript">
    $(function(e) {
        var uid = 'automator',
            containers = {},
            controls = {},
            preferences, database;

        controls.loadPreferences = function(d) {
            preferences = d;
            containers.eupform.find('input[name="sourcepath"]').val(preferences.SourcePath);
            containers.eupform.find('input[name="garagepath"]').val(preferences.GaragePath);
        };
        controls.loadData = function(d) {
            database = d;
            var temp = '<div class="item" data-value="[0]">[0]</div>',
                ilist = (!!database.Repositories) ? database.Repositories : [],
                olist = [];
            for(var i=0; i<ilist.length; i++) {
                olist.push(temp.autofit(ilist[i]));
            }
            containers.appform.find('[data-for="repositoryname"] .menu').html(olist.join(''));
        };
        controls.submitAppForm = function(e) {
            e.preventDefault();
            var wt = UniversalGUI.getInstance(),
                fp = FilePath.getInstance();
            var cmd = "", 
                val = wt.getFormFieldHashMap($(this));
            if (fp.isWindows()) {
                cmd = String("[0] -[1] [2] [3]").autofit(
                    fp.join(wt.getExtBasePath(), "automator", "automator.bat"),
                    val.performaction,
                    fp.join(preferences.SourcePath, val.repositoryname),
                    fp.join(preferences.GaragePath, val.repositoryname)
                );
            } else {
                cmd = String("cd [0] \n [1] -[2] [3] [4]").autofit(
                    fp.join(wt.getExtBasePath(), "automator"),
                    "sh automator",
                    val.performaction,
                    fp.join(preferences.SourcePath, val.repositoryname),
                    fp.join(preferences.GaragePath, val.repositoryname)
                );
            }            
            wt.executeCommand(cmd);
        };
        controls.submitEupForm = function(e) {
            e.preventDefault();
            var wt = UniversalGUI.getInstance(),
                fp = FilePath.getInstance();
            var val = wt.getFormFieldHashMap($(this));
            var cargo = (!!preferences)? preferences : {};
            cargo.SourcePath = fp.fixPath(val.sourcepath);
            cargo.GaragePath = fp.fixPath(val.garagepath);          
            wt.setExtPreferences(uid, JSON.stringify(cargo), controls.loadPreferences);
        };      
        controls.submitAnrForm = function(e) {
            e.preventDefault();
            var wt = UniversalGUI.getInstance();
            var val = wt.getFormFieldHashMap($(this));
            var cargo = (!!database)? database : {}; 
            cargo.Repositories = (!!cargo.Repositories) ? cargo.Repositories : [];
            cargo.Repositories.push(val.repositoryname);
            wt.setExtData(uid, JSON.stringify(cargo), controls.loadData);
            containers.anrform[0].reset();
        };
        controls.resetExtension = function(e) {
            var wt = UniversalGUI.getInstance();
            wt.resetActiveExtension();
            containers.dropdowns.dropdown('restore defaults');
        };

        var attachEvents = function() {
            containers.resetbtn.on('click', controls.resetExtension);
            containers.appform.submit(controls.submitAppForm);
            containers.eupform.submit(controls.submitEupForm);
            containers.anrform.submit(controls.submitAnrForm);
        }
        var initialize = function() {
            containers.self = $('#forme');

            containers.appform = containers.self.find('form#appform');
            containers.resetbtn = containers.appform.find(':reset');

            containers.eupform = containers.self.find('form#eupform');
            containers.anrform = containers.self.find('form#anrform');

            containers.dropdowns = containers.self.find('.ui.dropdown');
            containers.accordions = containers.self.find('.ui.accordion');

            containers.dropdowns.dropdown();
            containers.accordions.accordion({selector: {trigger: '.title .icon'}});

            var wt = UniversalGUI.getInstance();
            wt.getExtPreferences(uid, controls.loadPreferences);
            wt.getExtData(uid, controls.loadData);

            attachEvents();
        };
        
        initialize();
    });    
</script>