<!--intro{
### Automator (*Version 1.0.0*)
To ease the workflow, we have developed the automator tool that could
 - **Make a copy** of *cloned repository* in your local working directory, so that your *working repository* could be separated from the *cloned repository* that is used for reference and final code commit. 
 - **Synchronise** the *cloned repository* with your *working repository* before starting new task or at your will.
 - **Reverse synchronise** your *working repository* with the *cloned repository* when task gets completed or at your will.

#### Compatible with
 - Mac OSX, Windows, Linux

#### Note:
 - **Cloned repository** &rarr; It refers to git repository that is cloned from remote branch
 - **Working repository** &rarr; It refers to git repository that is local *working repository* based on *cloned repository*
}intro-->
<div class="ui message">
    <div class="header">Automator</div>
    <p>Fill out the form below then click on Execute button</p>
</div>
<div class="ui fluid accordion">
    <div class="title">
        <i class="settings icon"></i> Settings
    </div>
    <div class="content field">
        <form id="settingform" class="ui form">
            <div class="field">
                <label>Source path</label>
                <div class="field">
                    <input type="text" name="sourcepath" placeholder="/Users/kumarab/Documents/Workshop/Git">
                </div>
            </div>
            <div class="field">
                <label>Garage path</label>
                <div class="field">
                    <input type="text" name="garagepath" placeholder="/Users/kumarab/Documents/Workshop/Garage">
                </div>
            </div>
            <button type="submit" class="ui button">Save</button>
        </form>
    </div>
    <div class="title active">
        <i class="dropdown icon"></i> Application
    </div>
    <div class="content field active">
        <form id="appform" class="ui form">
            <div class="field">
                <label>Repository path/name</label>
                <div data-for="repositoryname" class="ui selection dropdown">
                    <input type="hidden" name="repositoryname">
                    <i class="dropdown icon"></i>
                    <div class="default text">Select repository</div>
                    <div class="menu"></div>
                </div>
            </div>
            <div class="field">
                <label>Perform action</label>
                <div class="ui selection dropdown">
                    <input type="hidden" name="performaction">
                    <i class="dropdown icon"></i>
                    <div class="default text">Select action</div>
                    <div class="menu">
                        <div class="item" data-value="help">Help</div>
                        <div class="item" data-value="copy">Copy</div>
                        <div class="item" data-value="sync">Synchronize</div>
                        <div class="item" data-value="rsync">Reverse Synchronize</div>
                    </div>
                </div>
            </div>
            <button type="submit" class="ui button">Execute</button>
            <button type="reset" class="ui button">Clear</button>
        </form>
    </div>
    <div class="title">
        <i class="dropdown icon"></i> Repositories
    </div>
    <div class="content field">
        <form id="repositoryform" class="ui form">
            <div class="field">
                <label>Repository path/name</label>
                <div class="ui labels"></div>
                <input type="text" name="repositoryname" placeholder="e.g., component-template" title="Enter the relative path of repository from Source/Garage path">
            </div>
            <button type="submit" class="ui button">Insert</button>
        </form>
    </div>
    <div class="title">
        <i class="dropdown icon"></i> Exclusions
    </div>
    <div class="content field">
        <form id="exclusionform" class="ui form">
            <div class="field">
                <label>Exclude files/folders</label>
                <div class="ui labels"></div>
                <input type="text" name="excludename" placeholder="e.g., node_modules" title="List down each file/folder separated by Enter to exclude from action">
            </div>
            <button type="submit" class="ui button">Exclude</button>
        </form>
    </div>
</div>
<script type="text/javascript">
$(function(e) {
    var uid = 'automator',
        containers = {},
        controls = {},
        preferences, database;

    controls.loadPreferences = function(d) {
        preferences = d;
        containers.settingform.find('input[name="sourcepath"]').val(preferences.SourcePath);
        containers.settingform.find('input[name="garagepath"]').val(preferences.GaragePath);
    };
    controls.loadData = function(d) {
        database = d;
        controls.loadDataInDropdown(d);
        controls.loadDataInRepositories(d);
        controls.loadDataInExclusions(d);
    };
    controls.loadDataInDropdown = function() {
        var tmpldd = '<div class="item" data-value="[0]">[0]</div>',
            ilist = (!!database.Repositories) ? database.Repositories : [],
            olistdd = [];
        for (var i = 0; i < ilist.length; i++) {
            olistdd.push(tmpldd.autofit(ilist[i]));
        }
        containers.appform.find('[data-for="repositoryname"] .menu').html(olistdd.join(''));
    };
    controls.loadDataInRepositories = function() {
        var tmplls = '<a class="ui label">[0]<i class="icon delete" data-index="[1]"></i></a>',
            ilist = (!!database.Repositories) ? database.Repositories : [],
            olistls = [];
        for (var i = 0; i < ilist.length; i++) {
            olistls.push(tmplls.autofit(ilist[i], i));
        }
        if (!!containers.repositoryitems) {
            containers.repositoryitems.off('click', controls.removeRepository);
        }
        containers.repositorylist.html(olistls.join(''));
        containers.repositoryitems = containers.repositorylist.find('a.ui.label > i.icon.delete');
        containers.repositoryitems.on('click', controls.removeRepository);
    };
    controls.loadDataInExclusions = function() {
        var tmpllb = '<a class="ui label">[0]<i class="icon delete" data-index="[1]"></i></a>',
            ilist = (!!database.Exclusions) ? database.Exclusions : [],
            olistlb = [];
        for (var i = 0; i < ilist.length; i++) {
            olistlb.push(tmpllb.autofit(ilist[i], i));
        }
        if (!!containers.exclusionitems) {
            containers.exclusionitems.off('click', controls.removeExclusion);
        }
        containers.exclusionlist.html(olistlb.join(''));
        containers.exclusionitems = containers.exclusionlist.find('a.ui.label > i.icon.delete');
        containers.exclusionitems.on('click', controls.removeExclusion);
    };
    controls.executeAppCmd = function(e) {
        e.preventDefault();
        var wt = UniversalGUI.getInstance(),
            fp = FilePath.getInstance();
        var cmd = "",
            val = wt.getFormFieldHashMap($(this));
        if (fp.isWindows()) {
            cmd = String("[0] -[1] [2] [3] \"[4]\"").autofit(
                fp.join(wt.getExtBasePath(), "automator", "automator.bat"),
                val.performaction,
                fp.join(preferences.SourcePath, val.repositoryname),
                fp.join(preferences.GaragePath, val.repositoryname),
                getExclusionsAsString(' ')
            );
        } else {
            cmd = String("cd [0] \n [1] -[2] [3] [4] \"[5]\"").autofit(
                fp.join(wt.getExtBasePath(), "automator"),
                "sh automator",
                val.performaction,
                fp.join(preferences.SourcePath, val.repositoryname),
                fp.join(preferences.GaragePath, val.repositoryname),
                getExclusionsAsString('\ ', '--exclude=')
            );
        }
        wt.executeCommand(cmd);
    };
    controls.saveSettings = function(e) {
        e.preventDefault();
        var wt = UniversalGUI.getInstance(),
            fp = FilePath.getInstance();
        var val = wt.getFormFieldHashMap($(this));
        var cargo = (!!preferences) ? preferences : {};
        cargo.SourcePath = fp.fixPath(val.sourcepath);
        cargo.GaragePath = fp.fixPath(val.garagepath);
        wt.setExtPreferences(uid, JSON.stringify(cargo), controls.loadPreferences);
    };
    controls.insertRepository = function(e) {
        e.preventDefault();
        var wt = UniversalGUI.getInstance();
        var val = wt.getFormFieldHashMap($(this));
        var cargo = (!!database) ? database : {};
        cargo.Repositories = (!!cargo.Repositories) ? cargo.Repositories : [];
        cargo.Repositories.push(val.repositoryname);
        wt.setExtData(uid, JSON.stringify(cargo), controls.loadData);
        containers.repositoryform[0].reset();
    };
    controls.removeRepository = function(e) {
        e.preventDefault();
        var wt = UniversalGUI.getInstance();
        var repositoryindex = $(e.target).data('index');
        var cargo = (!!database) ? database : {};
        cargo.Repositories = (!!cargo.Repositories) ? cargo.Repositories : [];
        cargo.Repositories.splice(repositoryindex, 1);
        wt.setExtData(uid, JSON.stringify(cargo), controls.loadData);
        containers.repositoryform[0].reset();
    };
    controls.insertExclusion = function(e) {
        e.preventDefault();
        var wt = UniversalGUI.getInstance();
        var val = wt.getFormFieldHashMap($(this));
        var cargo = (!!database) ? database : {};
        cargo.Exclusions = (!!cargo.Exclusions) ? cargo.Exclusions : [];
        cargo.Exclusions.push(val.excludename);
        wt.setExtData(uid, JSON.stringify(cargo), controls.loadData);
        containers.exclusionform[0].reset();
    };    
    controls.removeExclusion = function(e) {
        e.preventDefault();
        var wt = UniversalGUI.getInstance();
        var excludeindex = $(e.target).data('index');
        var cargo = (!!database) ? database : {};
        cargo.Exclusions = (!!cargo.Exclusions) ? cargo.Exclusions : [];
        cargo.Exclusions.splice(excludeindex, 1);
        wt.setExtData(uid, JSON.stringify(cargo), controls.loadData);
    };
    controls.resetExtension = function(e) {
        var wt = UniversalGUI.getInstance();
        wt.resetActiveExtension();
        containers.dropdowns.dropdown('restore defaults');
    };
    
    var getExclusionsAsString = function(delimiter, prefix) {
        var output = '',
            list = [];
        if (!!database.Exclusions) {
            for (var i=0; i<database.Exclusions.length; i++) {
                list.push(((!!prefix) ? prefix : '') + '"' + database.Exclusions[i] + '"');
            }
            output = list.join(delimiter);
        }
        return output;
    };
    var attachEvents = function() {
        containers.resetbtn.on('click', controls.resetExtension);
        containers.appform.submit(controls.executeAppCmd);
        containers.settingform.submit(controls.saveSettings);
        containers.repositoryform.submit(controls.insertRepository);
        containers.exclusionform.submit(controls.insertExclusion);
    }
    var initialize = function() {
        containers.self = $('#forme');

        containers.accordions = containers.self.find('.ui.accordion');

        containers.appform = containers.self.find('form#appform');
        containers.resetbtn = containers.appform.find(':reset');
        containers.dropdowns = containers.appform.find('.ui.dropdown');
        
        containers.settingform = containers.self.find('form#settingform');

        containers.repositoryform = containers.self.find('form#repositoryform');
        containers.repositorylist = containers.repositoryform.find('.ui.labels');
        
        containers.exclusionform = containers.self.find('form#exclusionform');
        containers.exclusionlist = containers.exclusionform.find('.ui.labels');
        
        containers.dropdowns.dropdown();
        containers.accordions.accordion({ selector: { trigger: '.title .icon' } });

        var wt = UniversalGUI.getInstance();
        wt.getExtPreferences(uid, controls.loadPreferences);
        wt.getExtData(uid, controls.loadData);

        attachEvents();
    };

    initialize();
});
</script>